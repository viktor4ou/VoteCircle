// <auto-generated />
using System;
using API.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250331122309_test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Models.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PercentageWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("VotingSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VotingSessionId");

                    b.ToTable("Entities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PercentageWeight = 5.2m,
                            Title = "Change roof",
                            VotingSessionId = 1
                        },
                        new
                        {
                            Id = 2,
                            PercentageWeight = 3.6m,
                            Title = "New water pipe",
                            VotingSessionId = 1
                        });
                });

            modelBuilder.Entity("API.Models.Models.VotingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Result")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ScheduledUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("VotingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2025, 3, 24, 21, 33, 37, 0, DateTimeKind.Utc),
                            Description = "We need to change the water pipe",
                            IsActive = false,
                            Result = 0m,
                            ScheduledUntil = new DateTime(2025, 3, 24, 21, 33, 37, 0, DateTimeKind.Utc),
                            Title = "New water pipe"
                        });
                });

            modelBuilder.Entity("API.Models.Models.Entity", b =>
                {
                    b.HasOne("API.Models.Models.VotingSession", "Session")
                        .WithMany("Entities")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("API.Models.Models.VotingSession", b =>
                {
                    b.Navigation("Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
